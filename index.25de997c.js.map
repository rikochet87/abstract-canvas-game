{"mappings":"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","sources":["src/projectiles.js","src/particle.js","src/enemy.js","src/index.js","src/player.js","src/spawn-enemies.js"],"sourcesContent":["import { canvas, c } from \"./index\";\r\n\r\nclass Projectile {\r\n  constructor(x, y, radius, color, velocity) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.radius = radius;\r\n    this.color = color;\r\n    this.velocity = velocity;\r\n  }\r\n  draw() {\r\n    c.beginPath();\r\n    c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\r\n    c.fillStyle = this.color;\r\n    c.fill();\r\n  }\r\n  update(){\r\n      this.draw()\r\n      this.x = this.x + this.velocity.x\r\n      this.y = this.y + this.velocity.y\r\n  }\r\n}\r\n\r\nexport { Projectile };\r\n","import { canvas, c } from \"./index\";\r\n\r\nconst friction = 0.99;\r\nclass Particle {\r\n  constructor(x, y, radius, color, velocity) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.radius = radius;\r\n    this.color = color;\r\n    this.velocity = velocity;\r\n    this.alpha = 1;\r\n  }\r\n  draw() {\r\n    c.save();\r\n    c.globalAlpha = this.alpha;\r\n    c.beginPath();\r\n    c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\r\n    c.fillStyle = this.color;\r\n    c.fill();\r\n    c.restore();\r\n  }\r\n  update() {\r\n    this.draw();\r\n    this.velocity.x *= friction\r\n    this.velocity.y *= friction\r\n    this.x = this.x + this.velocity.x;\r\n    this.y = this.y + this.velocity.y;\r\n    this.alpha -= 0.01;\r\n  }\r\n}\r\n\r\nexport { Particle };\r\n","import { canvas, c } from \"./index\";\r\n\r\nclass Enemy {\r\n  constructor(x, y, radius, color, velocity) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.radius = radius;\r\n    this.color = color;\r\n    this.velocity = velocity;\r\n  }\r\n  draw() {\r\n    c.beginPath();\r\n    c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\r\n    c.fillStyle = this.color;\r\n    c.fill();\r\n  }\r\n  update(){\r\n      this.draw()\r\n      this.x = this.x + this.velocity.x\r\n      this.y = this.y + this.velocity.y\r\n  }\r\n}\r\n\r\nexport { Enemy };","import { Player } from \"./player\";\r\nimport { Projectile } from \"./projectiles\";\r\nimport { Particle } from \"./particle\";\r\nimport { spawnEnemies } from \"./spawn-enemies\";\r\n\r\nconst canvas = document.querySelector(\"canvas\");\r\nconst c = canvas.getContext(\"2d\");\r\n\r\ncanvas.width = innerWidth;\r\ncanvas.height = innerHeight;\r\n\r\nconst scoreEl = document.querySelector(\"#scoreEl\");\r\n\r\nconst x = canvas.width / 2;\r\nconst y = canvas.height / 2;\r\n\r\nconst player = new Player(x, y, 10, \"white\");\r\nconst projectiles = [];\r\nconst enemies = [];\r\nconst particles = [];\r\n\r\nlet animationId;\r\nlet score = 0;\r\n\r\nfunction animate() {\r\n  animationId = requestAnimationFrame(animate);\r\n  c.fillStyle = \"rgba(0, 0, 0, 0.1\";\r\n  c.fillRect(0, 0, canvas.width, canvas.height);\r\n  player.draw();\r\n\r\n  particles.forEach((particle, index) =>{\r\n    if(particle.alpha <= 0){\r\n      particles.splice(index, 1)\r\n    }else{\r\n      particle.update()\r\n    }\r\n  })\r\n\r\n  projectiles.forEach((projectile, index) => {\r\n    projectile.update();\r\n\r\n    //remove  from edges of screem\r\n    if (\r\n      projectile.x - projectile.radius < 0 ||\r\n      projectile.x - projectile.radius > canvas.width ||\r\n      projectile.y - projectile.radius < 0 ||\r\n      projectile.y - projectile.radius > canvas.height\r\n    ) {\r\n      setTimeout(() => {\r\n        projectiles.splice(index, 1);\r\n      }, 0);\r\n    }\r\n  });\r\n\r\n  enemies.forEach((enemy, index) => {\r\n    enemy.update();\r\n\r\n    const dist = Math.hypot(player.x - enemy.x, player.y - enemy.y);\r\n\r\n    //end game\r\n    if (dist - enemy.radius - player.radius < 1) {\r\n      cancelAnimationFrame(animationId);\r\n    }\r\n\r\n    projectiles.forEach((projectile, projectileIndex) => {\r\n      const dist = Math.hypot(projectile.x - enemy.x, projectile.y - enemy.y);\r\n\r\n      // when projectiles touch enemy\r\n      if (dist - enemy.radius - projectile.radius < 1) {\r\n\r\n        //create explosions\r\n        for (let i = 0; i < enemy.radius * 2; i++) {\r\n          particles.push(\r\n            new Particle(projectile.x, projectile.y, Math.random() * 2, enemy.color, {\r\n              x: (Math.random() - 0.5)*(Math.random()*6),\r\n              y: (Math.random() - 0.5)*(Math.random()*6)\r\n            })\r\n          );\r\n        }\r\n\r\n        if (enemy.radius - 10 > 5) {\r\n\r\n        //increase our score\r\n        score += 100\r\n        scoreEl.innerHTML = score\r\n\r\n          gsap.to(enemy, {\r\n            radius: enemy.radius - 10,\r\n          });\r\n          setTimeout(() => {\r\n            projectiles.splice(projectileIndex, 1);\r\n          }, 0);\r\n        } else {\r\n          //remove from scene altogether\r\n        score += 250\r\n        scoreEl.innerHTML = score\r\n          setTimeout(() => {\r\n            enemies.splice(index, 1);\r\n            projectiles.splice(projectileIndex, 1);\r\n          }, 0);\r\n        }\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\naddEventListener(\"click\", (event) => {\r\n  const angle = Math.atan2(\r\n    event.clientY - canvas.height / 2,\r\n    event.clientX - canvas.width / 2\r\n  );\r\n  const velocity = {\r\n    x: Math.cos(angle) * 4,\r\n    y: Math.sin(angle) * 4,\r\n  };\r\n  projectiles.push(\r\n    new Projectile(canvas.width / 2, canvas.height / 2, 5, \"white\", velocity)\r\n  );\r\n});\r\n\r\nanimate();\r\nspawnEnemies();\r\n\r\nexport { canvas, c, enemies };\r\n","import { canvas, c } from \"./index\";\r\n\r\nclass Player {\r\n  constructor(x, y, radius, color) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.radius = radius;\r\n    this.color = color;\r\n  }\r\n  draw() {\r\n    c.beginPath();\r\n    c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\r\n    c.fillStyle = this.color;\r\n    c.fill();\r\n  }\r\n}\r\n\r\nexport { Player };\r\n","import { Enemy } from \"./enemy\";\r\nimport { canvas, enemies } from \"./index\";\r\n\r\nexport function spawnEnemies() {\r\n    setInterval(() => {\r\n      const radius = Math.random() * (30 - 4) + 4;\r\n      let x;\r\n      let y;\r\n  \r\n      if (Math.random() < 0.5) {\r\n        x = Math.random() < 0.5 ? 0 - radius : canvas.width + radius;\r\n        y = Math.random() * canvas.height;\r\n      } else {\r\n        x = Math.random() * canvas.width;\r\n        y = Math.random() < 0.5 ? 0 - radius : canvas.height + radius;\r\n      }\r\n  \r\n      const color = `hsl(${Math.random() * 360}, 50%, 50%)`;\r\n      const angle = Math.atan2(canvas.height / 2 - y, canvas.width / 2 - x);\r\n      const velocity = {\r\n        x: Math.cos(angle),\r\n        y: Math.sin(angle),\r\n      };\r\n      enemies.push(new Enemy(x, y, radius, color, velocity));\r\n    }, 1000);\r\n  }\r\n  "],"names":["$6022c694cdaf5679$export$58825bda29b44ca2","constructor","x","y","radius","color","velocity","this","draw","$35da740d59af89ba$export$db3b6bfb95261072","beginPath","arc","Math","PI","fillStyle","fill","update","$dd9c81dddb93e346$export$c36c68baa13912a5","alpha","save","globalAlpha","restore","$e410b08aadc0a985$export$eefe978c73a9a6","$35da740d59af89ba$export$67ea982130081db","document","querySelector","getContext","width","innerWidth","height","innerHeight","$35da740d59af89ba$var$scoreEl","$35da740d59af89ba$var$x","$35da740d59af89ba$var$y","$35da740d59af89ba$var$player","$35da740d59af89ba$var$projectiles","$35da740d59af89ba$export$288a92db2a369c1e","$35da740d59af89ba$var$particles","$35da740d59af89ba$var$animationId","$35da740d59af89ba$var$score","addEventListener","event","angle","atan2","clientY","clientX","cos","sin","push","$35da740d59af89ba$var$animate","requestAnimationFrame","fillRect","forEach","particle","index","splice","projectile","setTimeout","enemy","hypot","cancelAnimationFrame","projectileIndex","i","random","innerHTML","gsap","to","setInterval"],"version":3,"file":"index.25de997c.js.map"}