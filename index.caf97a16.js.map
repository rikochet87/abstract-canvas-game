{"mappings":"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","sources":["src/player.js","src/projectiles.js","src/particle.js","src/enemy.js","src/index.js","src/spawn-enemies.js"],"sourcesContent":["import { canvas, c } from \"./index\";\r\n\r\nclass Player {\r\n  constructor(x, y, radius, color) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.radius = radius;\r\n    this.color = color;\r\n  }\r\n  draw() {\r\n    c.beginPath();\r\n    c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\r\n    c.fillStyle = this.color;\r\n    c.fill();\r\n  }\r\n}\r\n\r\nexport { Player };\r\n","import { canvas, c } from \"./index\";\r\n\r\nclass Projectile {\r\n  constructor(x, y, radius, color, velocity) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.radius = radius;\r\n    this.color = color;\r\n    this.velocity = velocity;\r\n  }\r\n  draw() {\r\n    c.beginPath();\r\n    c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\r\n    c.fillStyle = this.color;\r\n    c.fill();\r\n  }\r\n  update(){\r\n      this.draw()\r\n      this.x = this.x + this.velocity.x\r\n      this.y = this.y + this.velocity.y\r\n  }\r\n}\r\n\r\nexport { Projectile };\r\n","import { canvas, c } from \"./index\";\r\n\r\nconst friction = 0.99;\r\nclass Particle {\r\n  constructor(x, y, radius, color, velocity) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.radius = radius;\r\n    this.color = color;\r\n    this.velocity = velocity;\r\n    this.alpha = 1;\r\n  }\r\n  draw() {\r\n    c.save();\r\n    c.globalAlpha = this.alpha;\r\n    c.beginPath();\r\n    c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\r\n    c.fillStyle = this.color;\r\n    c.fill();\r\n    c.restore();\r\n  }\r\n  update() {\r\n    this.draw();\r\n    this.velocity.x *= friction\r\n    this.velocity.y *= friction\r\n    this.x = this.x + this.velocity.x;\r\n    this.y = this.y + this.velocity.y;\r\n    this.alpha -= 0.01;\r\n  }\r\n}\r\n\r\nexport { Particle };\r\n","import { canvas, c } from \"./index\";\r\n\r\nclass Enemy {\r\n  constructor(x, y, radius, color, velocity) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.radius = radius;\r\n    this.color = color;\r\n    this.velocity = velocity;\r\n  }\r\n  draw() {\r\n    c.beginPath();\r\n    c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\r\n    c.fillStyle = this.color;\r\n    c.fill();\r\n  }\r\n  update(){\r\n      this.draw()\r\n      this.x = this.x + this.velocity.x\r\n      this.y = this.y + this.velocity.y\r\n  }\r\n}\r\n\r\nexport { Enemy };","import { Player } from \"./player\";\r\nimport { Projectile } from \"./projectiles\";\r\nimport { Particle } from \"./particle\";\r\nimport { spawnEnemies } from \"./spawn-enemies\";\r\n\r\nconst canvas = document.querySelector(\"canvas\");\r\nconst c = canvas.getContext(\"2d\");\r\n\r\ncanvas.width = innerWidth;\r\ncanvas.height = innerHeight;\r\n\r\nconst scoreEl = document.querySelector(\"#scoreEl\");\r\nconst startGameBtn = document.querySelector(\"#startGameBtn\");\r\nconst modalEl = document.querySelector(\"#modalEl\");\r\nconst bigScoreEL = document.querySelector(\"#bigScoreEl\");\r\n\r\nconst x = canvas.width / 2;\r\nconst y = canvas.height / 2;\r\n\r\nlet player = new Player(x, y, 10, \"white\");\r\nlet projectiles = [];\r\nlet enemies = [];\r\nlet particles = [];\r\n\r\nfunction init() {\r\n  player = new Player(x, y, 10, \"white\");\r\n  projectiles = [];\r\n  enemies = [];\r\n  particles = [];\r\n  score = 0;\r\n  scoreEl.innerHTML = score;\r\n  bigScoreEL.innerHTML = score;\r\n}\r\n\r\nlet animationId;\r\nlet score = 0;\r\n\r\nfunction animate() {\r\n  animationId = requestAnimationFrame(animate);\r\n  c.fillStyle = \"rgba(0, 0, 0, 0.1\";\r\n  c.fillRect(0, 0, canvas.width, canvas.height);\r\n  player.draw();\r\n\r\n  particles.forEach((particle, index) => {\r\n    if (particle.alpha <= 0) {\r\n      particles.splice(index, 1);\r\n    } else {\r\n      particle.update();\r\n    }\r\n  });\r\n\r\n  projectiles.forEach((projectile, index) => {\r\n    projectile.update();\r\n\r\n    //remove  from edges of screem\r\n    if (\r\n      projectile.x - projectile.radius < 0 ||\r\n      projectile.x - projectile.radius > canvas.width ||\r\n      projectile.y - projectile.radius < 0 ||\r\n      projectile.y - projectile.radius > canvas.height\r\n    ) {\r\n      setTimeout(() => {\r\n        projectiles.splice(index, 1);\r\n      }, 0);\r\n    }\r\n  });\r\n\r\n  enemies.forEach((enemy, index) => {\r\n    enemy.update();\r\n\r\n    const dist = Math.hypot(player.x - enemy.x, player.y - enemy.y);\r\n\r\n    //end game\r\n    if (dist - enemy.radius - player.radius < 1) {\r\n      cancelAnimationFrame(animationId);\r\n      modalEl.style.display = \"flex\";\r\n      bigScoreEL.innerHTML = score;\r\n    }\r\n\r\n    projectiles.forEach((projectile, projectileIndex) => {\r\n      const dist = Math.hypot(projectile.x - enemy.x, projectile.y - enemy.y);\r\n\r\n      // when projectiles touch enemy\r\n      if (dist - enemy.radius - projectile.radius < 1) {\r\n        //create explosions\r\n        for (let i = 0; i < enemy.radius * 2; i++) {\r\n          particles.push(\r\n            new Particle(\r\n              projectile.x,\r\n              projectile.y,\r\n              Math.random() * 2,\r\n              enemy.color,\r\n              {\r\n                x: (Math.random() - 0.5) * (Math.random() * 6),\r\n                y: (Math.random() - 0.5) * (Math.random() * 6),\r\n              }\r\n            )\r\n          );\r\n        }\r\n\r\n        if (enemy.radius - 10 > 5) {\r\n          //increase our score\r\n          score += 100;\r\n          scoreEl.innerHTML = score;\r\n\r\n          gsap.to(enemy, {\r\n            radius: enemy.radius - 10,\r\n          });\r\n          setTimeout(() => {\r\n            projectiles.splice(projectileIndex, 1);\r\n          }, 0);\r\n        } else {\r\n          //remove from scene altogether\r\n          score += 250;\r\n          scoreEl.innerHTML = score;\r\n          setTimeout(() => {\r\n            enemies.splice(index, 1);\r\n            projectiles.splice(projectileIndex, 1);\r\n          }, 0);\r\n        }\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\naddEventListener(\"click\", (event) => {\r\n  const angle = Math.atan2(\r\n    event.clientY - canvas.height / 2,\r\n    event.clientX - canvas.width / 2\r\n  );\r\n  const velocity = {\r\n    x: Math.cos(angle) * 4,\r\n    y: Math.sin(angle) * 4,\r\n  };\r\n  projectiles.push(\r\n    new Projectile(canvas.width / 2, canvas.height / 2, 5, \"white\", velocity)\r\n  );\r\n});\r\n\r\nstartGameBtn.addEventListener(\"click\", () => {\r\n  init()\r\n  animate();\r\n  spawnEnemies();\r\n  modalEl.style.display = \"none\";\r\n});\r\n\r\nexport { canvas, c, enemies };\r\n","import { Enemy } from \"./enemy\";\r\nimport { canvas, enemies } from \"./index\";\r\n\r\nexport function spawnEnemies() {\r\n    setInterval(() => {\r\n      const radius = Math.random() * (30 - 4) + 4;\r\n      let x;\r\n      let y;\r\n  \r\n      if (Math.random() < 0.5) {\r\n        x = Math.random() < 0.5 ? 0 - radius : canvas.width + radius;\r\n        y = Math.random() * canvas.height;\r\n      } else {\r\n        x = Math.random() * canvas.width;\r\n        y = Math.random() < 0.5 ? 0 - radius : canvas.height + radius;\r\n      }\r\n  \r\n      const color = `hsl(${Math.random() * 360}, 50%, 50%)`;\r\n      const angle = Math.atan2(canvas.height / 2 - y, canvas.width / 2 - x);\r\n      const velocity = {\r\n        x: Math.cos(angle),\r\n        y: Math.sin(angle),\r\n      };\r\n      enemies.push(new Enemy(x, y, radius, color, velocity));\r\n    }, 1000);\r\n  }\r\n  "],"names":["$1b5e89835ea262cf$export$2616165974278734","constructor","x","y","radius","color","this","draw","$35da740d59af89ba$export$db3b6bfb95261072","beginPath","arc","Math","PI","fillStyle","fill","$6022c694cdaf5679$export$58825bda29b44ca2","velocity","update","$dd9c81dddb93e346$export$c36c68baa13912a5","alpha","save","globalAlpha","restore","$e410b08aadc0a985$export$eefe978c73a9a6","$35da740d59af89ba$export$67ea982130081db","document","querySelector","getContext","width","innerWidth","height","innerHeight","$35da740d59af89ba$var$scoreEl","$35da740d59af89ba$var$startGameBtn","$35da740d59af89ba$var$modalEl","$35da740d59af89ba$var$bigScoreEL","$35da740d59af89ba$var$x","$35da740d59af89ba$var$y","$35da740d59af89ba$var$animationId","$35da740d59af89ba$var$player","$35da740d59af89ba$var$projectiles","$35da740d59af89ba$export$288a92db2a369c1e","$35da740d59af89ba$var$particles","$35da740d59af89ba$var$score","$35da740d59af89ba$var$animate","requestAnimationFrame","fillRect","forEach","particle","index","splice","projectile","setTimeout","enemy","hypot","cancelAnimationFrame","style","display","innerHTML","projectileIndex","i","push","random","gsap","to","addEventListener","event","angle","atan2","clientY","clientX","cos","sin","setInterval"],"version":3,"file":"index.caf97a16.js.map"}